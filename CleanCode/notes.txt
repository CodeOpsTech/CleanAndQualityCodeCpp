Not a bugs become defects (only the exposed bugs/found through testing become defects) 
Known bugs are just tip of the iceberg 

Prefer C++ programming constructs instead of equivalent C constructs (e.g., C++ style casts instead of C style casts) 
Improving readability 
	-> Proper variable names 
	-> Reducing nesting levels 
	-> Cryptic code should be avoided; readable code is more important than cryptic code 
	-> Adding comments explaining the intent or meaning behind the code 

Beware of typing mistakes (like missing comma, extra semi-colon etc). 
Avoid low-level language features like bit-fields, unions etc. 

Ensure proper termination of loops 
Make sure variables are always initialised (especially local ones - because they are not initialized to zero by default) 
Converting natural language statements directly to code is risky 
Do not use bitwise and logical operators interchangeably 
Beware of overflow 
	-> especially in casts and expressions - by default integral expressions are integers 
	-> use larger data types 

Floating point numbers are not intuitive
	-> Divide by zero -> INF
	-> any operation on INF becomes NAN 
	-> you cannot directly compare nan with nan using ==; you have to use isnan
	-> never ever compare floating points for equality using == operator or != operator 
		-> use a project wide error margin and use it for accommodating the difference in calc error 
	-> don’t ever use floating number in looping conditions 
	-> doubles - same thing applies :-) 
	
Do not depend on side-effect operations (like ++x, x—-, etc) 	
	
Do not comment-out code 
Avoid long sourcelines (not more than 80 characters) 
Do not have any dead code (unreachable code) 

Use sonarcube which is a dashboard for technical metrics 
	-> percentage code duplication
	-> code coverage percentage
	-> line of code, cyclomatic complexity 
	-> ... 

Use a clone analyser tool 
	* simian (similarity analyser) (commercial - but very affordable) 
	* pmd-cpd (copy paste detector) - free open source tool 

* Prefer new and delete instead of malloc and free 
* Use symmetric form of new and deletes 
	-> if array new, use array delete
	-> if you use placement new, use placement delete 
	-> if you use a plain new, use plain delete
* To avoid all this headache in malloc and new and delete and free, use smart pointers 
* Don’t use any pointers in your programs - use smart pointers instead! 

* Provide virtual destructors in base classes (that are used polymorphically) 
* Prefer passing class objects by reference instead of passing them by value (because objects get sliced) 
* If you have any resources in your classes, then provide default constructor, assignment operator, copy constructor and then a destructor (BIG 4) 
* Beware of hiding data members in constructors 
* Do not chain constructors inside the constructor body - you can provide them in the constructor initialiser list 
* List members in an initialiser list in the order in which they are declared

Day 2: 
* Prefer standard library functions instead of hand-coded logic 
* Using features like lambdas, auto keyword, etc. can help you write more readable and shorter code 
* Adopt a coding guidelines - adhere to it 
* Most real-world software is badly written, but works. So, don’t give up and try keep improving 
* Try adopting TDD and ATDD - write tests before writing code 
* Adopt relevant tools, at least one of the from each of the following categories: 

Many kinds of tools you can use 

* Static analysis tools 
	-> look for bug patterns
	cppcheck, pc-lint/flexlint, parasoft cpptest, goanna, coverity, …

* clone detection tools
	-> DuDE - duplicate detector, simian, pmd-cpd 

* metric tools 
	-> CCCC (free tool), understand, infusion/incode 

* dynamic analysis tools (memory leaks, security problems, etc) 
	-> valgrind, Dr. Memory, … 

* Unit testing tools
	-> CppUnit, open source CppTest   

* smell detection tools
	-> infusion/incode, cppdepend, structure101, sonarqube … 

* sonarqube 
	-> dashboard for quality  

---
* One Declaration Rule (One Definition Rule) 
	* Ensure that the class/structure/enum/… the declarations are same across translation units 

* Avoid overloading AND overriding together 

* Design principles are key for creating high-quality software

* SOLID	
	* Single Responsibility -> one abstraction, one responsibility 
	* Open Closed -> open for extension, but closed for modification 
	* Liskov’s Substitution -> “is-a” relationship should hold 
	* Interface Segregation -> clients should not be forced to depend on interfaces they do not use 
	* Dependency Inversion -> depend on abstractions and not on concrete implementations 

* Booch’s fundamental principles
	* Abstraction
	* Encapsulation
	* Moduarlization
	* Hierarchy 

* Principles behind design patterns
	* Program to an interface, not to an implementation
	* Prefer composition over inheritance 
	* Encapsulate variation 

Best practices 
	* Avoid calling virtual functions from constructors 
	* Avoid confusing overloads
	* Use override keyword for explicitly overriding the methods 
	* Use generics if the behaviour between types don’t change; use inheritance if behaviour between types change 
	* Use pure virtual functions for forcing derived types a contract 
	* Use virtual functions for providing a default contract for its derived types
	* Use non-virtual functions for providing default implementation for its derived types 
	* Do not use arrays polymorphically 

——
Day 4: 

* How do we know if the design is effective? The answer is: “is it unit testable?” 

* Smells can be viewed as violation of fundamental design principles. Effective designs do not have smells or have very few smells. 

* TDD cycle: Red-Green-Refactor; Red - the test is failing. Green - the test is passing (the code may be smelly). Refactor - get rid of the smell. 

* Design patterns emerge naturally when we apply design principles 

* Composite: Deal with part-whole hierarchies. Do not differentiate between leaf nodes and composite nodes. Treat them uniformly. 

* Factory method: Control object creation. It is useful for restricting the number of objects created - singleton, multiton. It is also useful for applying flyweight pattern. 

* Flyweight pattern: Reuse existing objects. Constant or immutable objects. 

* Builder: Use a dedicate class for building a complex object. 

* Strategy: To encapsulate variation in algorithms. Choose a specific algorithm or approach at runtime. 

* Visitor: Allow traversing a tree-like structure 

* Command: Encapsulate actions. Convert actions to objects and execute them as needed. 

* Facade: Hide the internal complexity of how subsystems interact with each other. 

* Pipe-and-filter architecture style: It is a style of architecting systems where output from one component is given as input to next component. 

——
